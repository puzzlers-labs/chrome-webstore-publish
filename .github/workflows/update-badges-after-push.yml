# This workflow manages status badges for coverage, Docker build, and tests after each push or manual trigger.
# It initializes badges as failing, runs jobs in parallel to update them, and pushes the results back to the repository.
# Artifacts are used to transfer badge files between jobs for up to 7 days.
#
# Jobs:
# - setup-badges: Initializes badge files as failing and uploads them as artifacts.
# - coverage: Runs tests, calculates coverage, updates the coverage badge, and uploads it.
# - docker-build: Builds the Docker image, updates the Docker build badge, and uploads it.
# - tests: Runs tests, updates the test badge based on results, and uploads it.
# - push-badges: Downloads all updated badges and pushes them to the repository.

name: Update Badges After Push

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup-badges:
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository code for badge initialization
      - name: Checkout repository
        uses: actions/checkout@v4

      # Creates badge JSON files with failing status for initial state
      - name: Set all badges to failing
        run: |
          set -e
          mkdir -p .github
          echo '{ "schemaVersion": 1, "label": "Coverage", "message": "failed", "color": "red" }' > .github/coverage-badge.json
          echo '{ "schemaVersion": 1, "label": "Docker Build", "message": "failed", "color": "red" }' > .github/docker-build-badge.json
          echo '{ "schemaVersion": 1, "label": "Tests", "message": "failing", "color": "red" }' > .github/test-status-badge.json

      # Lists badge files for debugging and verification
      - name: List badge files
        run: ls -l .github

      # Uploads badge files as artifacts for use in other jobs
      - name: Upload badge artifacts
        uses: actions/upload-artifact@v4
        with:
          name: badges
          path: |
            .github/coverage-badge.json
            .github/docker-build-badge.json
            .github/test-status-badge.json
          retention-days: 7

  coverage:
    needs: setup-badges
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      # Checks out the repository code for coverage job
      - name: Checkout repository
        uses: actions/checkout@v4

      # Downloads initial badge files for update
      - name: Download badge artifacts
        uses: actions/download-artifact@v4
        with:
          name: badges
          path: .github

      # Sets up Node.js for running tests and coverage
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Installs pnpm for dependency management
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Installs project dependencies
      - name: Install dependencies
        run: pnpm install

      # Installs browsers required for Puppeteer tests
      - name: Install puppeteer browsers
        run: pnpm dlx puppeteer browsers install

      # Runs tests and generates a coverage report
      - name: Run tests and generate coverage report
        run: |
          npx jest --coverage --coverageReporters=text-summary > coverage.txt

      # Prints the coverage report for debugging
      - name: Print coverage.txt for debug
        run: cat coverage.txt

      # Extracts coverage percentage and generates a badge JSON file
      - name: Parse coverage value and generate badge
        run: |
          set -x
          COVERAGE=$(grep -Po '^Lines\s*:\s*\K[0-9.]+(?=%)' coverage.txt || echo "")
          echo "Extracted coverage: $COVERAGE"
          if [ -z "$COVERAGE" ]; then
            echo "Coverage value not found in coverage.txt"
            exit 1
          fi
          COLOR=$( [ "$(echo "$COVERAGE >= 90" | bc -l)" -eq 1 ] && echo green || echo yellow )
          echo '{
            "schemaVersion": 1,
            "label": "Coverage",
            "message": "'"$COVERAGE"'%",
            "color": "'"$COLOR"'"
          }' > .github/coverage-badge.json

      # Uploads the updated coverage badge as an artifact
      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-badge
          path: .github/coverage-badge.json
          retention-days: 7

  docker-build:
    needs: setup-badges
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      # Checks out the repository for Docker build
      - name: Checkout repository
        uses: actions/checkout@v4

      # Downloads initial badge files for update
      - name: Download badge artifacts
        uses: actions/download-artifact@v4
        with:
          name: badges
          path: .github

      # Builds the Docker image for the project
      - name: Build Docker image
        id: docker_build
        run: |
          docker build -t my-image-name .

      # Updates the Docker build badge to passing if build succeeds
      - name: Set status to success if build passed
        if: success()
        run: |
          echo '{
            "schemaVersion": 1,
            "label": "Docker Build",
            "message": "passing",
            "color": "green"
          }' > .github/docker-build-badge.json

      # Uploads the updated Docker build badge as an artifact
      - name: Upload docker badge
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-build-badge
          path: .github/docker-build-badge.json
          retention-days: 7

  tests:
    needs: setup-badges
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      # Checks out the repository for running tests
      - name: Checkout repository
        uses: actions/checkout@v4

      # Downloads initial badge files for update
      - name: Download badge artifacts
        uses: actions/download-artifact@v4
        with:
          name: badges
          path: .github

      # Sets up Node.js for running tests
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Installs pnpm for dependency management
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Installs project dependencies
      - name: Install dependencies
        run: pnpm install

      # Installs browsers required for Puppeteer tests
      - name: Install puppeteer browsers
        run: pnpm dlx puppeteer browsers install

      # Runs tests and sets the test badge based on the result
      - name: Run tests and set test badge
        run: |
          pnpm test && STATUS=passing || STATUS=failing
          COLOR=$( [ "$STATUS" = "passing" ] && echo green || echo red )
          echo '{
            "schemaVersion": 1,
            "label": "Tests",
            "message": "'"$STATUS"'",
            "color": "'"$COLOR"'"
          }' > .github/test-status-badge.json

      # Uploads the updated test badge as an artifact
      - name: Upload test badge
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-status-badge
          path: .github/test-status-badge.json
          retention-days: 7

  push-badges:
    needs: [coverage, docker-build, tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      # Checks out the repository to push updated badges
      - name: Checkout repository
        uses: actions/checkout@v4

      # Downloads the updated coverage badge artifact
      - name: Download coverage badge
        uses: actions/download-artifact@v4
        with:
          name: coverage-badge
          path: .github

      # Downloads the updated Docker build badge artifact
      - name: Download Docker build badge
        uses: actions/download-artifact@v4
        with:
          name: docker-build-badge
          path: .github

      # Downloads the updated test badge artifact
      - name: Download test status badge
        uses: actions/download-artifact@v4
        with:
          name: test-status-badge
          path: .github

      # Commits and pushes the updated badge files to the repository
      - name: Commit and push badges
        run: |
          git config user.name "puzzlers-tech[bot]"
          git config user.email "tech@puzzlers-labs.com"
          git add .github/coverage-badge.json
          git add .github/docker-build-badge.json
          git add .github/test-status-badge.json
          git commit -m "chore: update badges [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main

# This workflow automatically bumps the package version in package.json when a new release is published.
# It runs on release events, extracts the version from the release tag, updates package.json, and commits the change.
# The workflow uses Node.js and pnpm for version management and package handling.
# The commit is pushed with a bot user to keep versioning in sync with releases.
# This ensures that the package.json version always matches the latest release tag.

name: Bump version and publish Docker images on release

on:
  release:
    types: [published]

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository so workflow can access and modify files.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to push tag for release

      # Extracts the version number from the release tag and makes it available for later steps.
      - name: Determine target version
        id: get_version
        run: |
          version="${{ github.event.release.tag_name }}"
          clean_version=${version#v}  # strip leading v
          echo "RELEASE_VERSION=$clean_version" >> "$GITHUB_OUTPUT"

      # Sets up the specified Node.js version for running scripts and pnpm.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Installs the latest version of pnpm for package management.
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      # Updates the version in package.json to match the release version, without creating a git tag.
      - name: Bump package.json version
        run: |
          pnpm version --no-git-tag-version "${{ steps.get_version.outputs.RELEASE_VERSION }}"

      # Logs in to GitHub Container Registry (GHCR) using the GitHub Actions token.
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Builds the Docker image and tags it with the release version and latest.
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.RELEASE_VERSION }} \
                       -t ghcr.io/${{ github.repository }}:latest .

      # Pushes both tags to GHCR.
      - name: Push Docker image to GHCR (version)
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.RELEASE_VERSION }}
      - name: Push Docker image to GHCR (latest)
        run: |
          docker push ghcr.io/${{ github.repository }}:latest

      # Logs in to Docker Hub using secrets.
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      # Tags the Docker image for Docker Hub (version and latest).
      - name: Tag Docker image for Docker Hub
        run: |
          IMAGE_NAME=${{ vars.DOCKERHUB_USERNAME }}/$(echo "${{ github.repository }}" | cut -d'/' -f2)
          docker tag ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.RELEASE_VERSION }} $IMAGE_NAME:${{ steps.get_version.outputs.RELEASE_VERSION }}
          docker tag ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.RELEASE_VERSION }} $IMAGE_NAME:latest

      # Pushes both tags to Docker Hub.
      - name: Push Docker image to Docker Hub (version)
        run: |
          IMAGE_NAME=${{ vars.DOCKERHUB_USERNAME }}/$(echo "${{ github.repository }}" | cut -d'/' -f2)
          docker push $IMAGE_NAME:${{ steps.get_version.outputs.RELEASE_VERSION }}
      - name: Push Docker image to Docker Hub (latest)
        run: |
          IMAGE_NAME=${{ vars.DOCKERHUB_USERNAME }}/$(echo "${{ github.repository }}" | cut -d'/' -f2)
          docker push $IMAGE_NAME:latest

      # Gets the name of the default branch.
      - name: Get default branch
        id: default_branch
        run: echo "DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')" >> $GITHUB_OUTPUT

      # Commits the updated package.json and pushes the change using a bot account.
      - name: Commit and push version bump
        run: |
          git config user.name "puzzlers-tech[bot]"
          git config user.email "tech@puzzlers-labs.com"
          git add package.json
          git commit -m "chore: bump version to v${{ steps.get_version.outputs.RELEASE_VERSION }} [skip ci]"
          git push origin HEAD:${{ steps.default_branch.outputs.DEFAULT_BRANCH }}

      - name: Extract major alias (v1, v2 â€¦)
        id: alias
        run: echo "ALIAS=$(echo '${{ github.ref_name }}' | cut -d'.' -f1)" >> "$GITHUB_OUTPUT"

      - name: Move the alias tag
        run: |
          git config user.name "puzzlers-tech[bot]"
          git config user.email "tech@puzzlers-labs.com"
          git tag -f ${{ steps.alias.outputs.ALIAS }} ${{ github.sha }}
          git push -f origin ${{ steps.alias.outputs.ALIAS }}
